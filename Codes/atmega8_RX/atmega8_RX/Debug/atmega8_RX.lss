
atmega8_RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001a8  0000021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000c18  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000001ab  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000470  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000174  00000000  00000000  000014d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000356  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000199c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000151  00000000  00000000  000019e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 ea       	ldi	r30, 0xA8	; 168
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	a4 c0       	rjmp	.+328    	; 0x1a4 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
int main(void)
{
	unsigned char data = 0;
	int baud = 9600;
	
	DDRC = 0xFF;
  5e:	8f ef       	ldi	r24, 0xFF	; 255
  60:	84 bb       	out	0x14, r24	; 20
	PORTC = 0;
  62:	15 ba       	out	0x15, r1	; 21
	DDRB = 0xFF;
  64:	87 bb       	out	0x17, r24	; 23
	PORTB = 0;
  66:	18 ba       	out	0x18, r1	; 24
	
		UCSRA &= ~(1 << U2X);
  68:	59 98       	cbi	0x0b, 1	; 11
	
		uint16_t UBRRValue = lrint((F_CPU /(16L * baud)) - 1) ;
  6a:	60 e0       	ldi	r22, 0x00	; 0
  6c:	70 e0       	ldi	r23, 0x00	; 0
  6e:	80 ea       	ldi	r24, 0xA0	; 160
  70:	90 e4       	ldi	r25, 0x40	; 64
  72:	35 d0       	rcall	.+106    	; 0xde <lrint>
	
		//Put the upper part of the baud number here (bits 8 to 11)
		UBRRH = (unsigned char) (UBRRValue >> 8);
  74:	70 bd       	out	0x20, r23	; 32

		//Put the remaining part of the baud number here
		UBRRL = (unsigned char) UBRRValue;
  76:	69 b9       	out	0x09, r22	; 9

		//Enable the receiver and transmitter
		UCSRB = (1 << RXEN) | (1 << TXEN);
  78:	88 e1       	ldi	r24, 0x18	; 24
  7a:	8a b9       	out	0x0a, r24	; 10
	
		UCSRC |= (1 << USBS); //Sets 2 stop bits
  7c:	80 b5       	in	r24, 0x20	; 32
  7e:	88 60       	ori	r24, 0x08	; 8
  80:	80 bd       	out	0x20, r24	; 32
		UCSRC |= (1 << UPM1); //Sets parity to EVEN
  82:	80 b5       	in	r24, 0x20	; 32
  84:	80 62       	ori	r24, 0x20	; 32
  86:	80 bd       	out	0x20, r24	; 32
		UCSRC |= (3 << UCSZ0); //Alternative code for 8-bit data length
  88:	80 b5       	in	r24, 0x20	; 32
  8a:	86 60       	ori	r24, 0x06	; 6
  8c:	80 bd       	out	0x20, r24	; 32
		if (UDR == 0xFF)
		{
			while (! (UCSRA & (1 << RXC)) );
			if (UDR == 0xEE)
			
			PORTB = 0xFF;
  8e:	9f ef       	ldi	r25, 0xFF	; 255
		UCSRC |= (1 << UPM1); //Sets parity to EVEN
		UCSRC |= (3 << UCSZ0); //Alternative code for 8-bit data length
	
	while(1)
    {
		while (! (UCSRA & (1 << RXC)) );
  90:	5f 9b       	sbis	0x0b, 7	; 11
  92:	fe cf       	rjmp	.-4      	; 0x90 <main+0x32>
		if (UDR == 0xFF)
  94:	8c b1       	in	r24, 0x0c	; 12
  96:	8f 3f       	cpi	r24, 0xFF	; 255
  98:	d9 f7       	brne	.-10     	; 0x90 <main+0x32>
		{
			while (! (UCSRA & (1 << RXC)) );
  9a:	5f 9b       	sbis	0x0b, 7	; 11
  9c:	fe cf       	rjmp	.-4      	; 0x9a <main+0x3c>
			if (UDR == 0xEE)
  9e:	8c b1       	in	r24, 0x0c	; 12
  a0:	8e 3e       	cpi	r24, 0xEE	; 238
  a2:	09 f4       	brne	.+2      	; 0xa6 <main+0x48>
			
			PORTB = 0xFF;
  a4:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2f ed       	ldi	r18, 0xDF	; 223
  a8:	32 e2       	ldi	r19, 0x22	; 34
  aa:	42 e0       	ldi	r20, 0x02	; 2
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	30 40       	sbci	r19, 0x00	; 0
  b0:	40 40       	sbci	r20, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x4e>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x58>
  b6:	00 00       	nop
			_delay_ms(700);
			PORTB = 0;
  b8:	18 ba       	out	0x18, r1	; 24
  ba:	2f ed       	ldi	r18, 0xDF	; 223
  bc:	32 e2       	ldi	r19, 0x22	; 34
  be:	42 e0       	ldi	r20, 0x02	; 2
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	30 40       	sbci	r19, 0x00	; 0
  c4:	40 40       	sbci	r20, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x62>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x6c>
  ca:	00 00       	nop
  cc:	e1 cf       	rjmp	.-62     	; 0x90 <main+0x32>

000000ce <_Z11RecieveUARTv>:
    }
}

unsigned char RecieveUART(void)
{
	while (! (UCSRA & (1 << RXC)) );
  ce:	5f 9b       	sbis	0x0b, 7	; 11
  d0:	fe cf       	rjmp	.-4      	; 0xce <_Z11RecieveUARTv>
	return UDR;
  d2:	8c b1       	in	r24, 0x0c	; 12
}
  d4:	08 95       	ret

000000d6 <_Z12TransmitUARTh>:

void TransmitUART(uint8_t data)
{
	while (! (UCSRA & (1 << UDRE)) );
  d6:	5d 9b       	sbis	0x0b, 5	; 11
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <_Z12TransmitUARTh>
	UDR = data;
  da:	8c b9       	out	0x0c, r24	; 12
}
  dc:	08 95       	ret

000000de <lrint>:
  de:	41 d0       	rcall	.+130    	; 0x162 <__fp_splitA>
  e0:	a8 f1       	brcs	.+106    	; 0x14c <lrint+0x6e>
  e2:	9e 57       	subi	r25, 0x7E	; 126
  e4:	a8 f1       	brcs	.+106    	; 0x150 <lrint+0x72>
  e6:	98 51       	subi	r25, 0x18	; 24
  e8:	60 f0       	brcs	.+24     	; 0x102 <lrint+0x24>
  ea:	39 f1       	breq	.+78     	; 0x13a <lrint+0x5c>
  ec:	98 30       	cpi	r25, 0x08	; 8
  ee:	70 f5       	brcc	.+92     	; 0x14c <lrint+0x6e>
  f0:	09 2e       	mov	r0, r25
  f2:	99 27       	eor	r25, r25
  f4:	66 0f       	add	r22, r22
  f6:	77 1f       	adc	r23, r23
  f8:	88 1f       	adc	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	0a 94       	dec	r0
  fe:	d1 f7       	brne	.-12     	; 0xf4 <lrint+0x16>
 100:	1c c0       	rjmp	.+56     	; 0x13a <lrint+0x5c>
 102:	bb 27       	eor	r27, r27
 104:	99 3f       	cpi	r25, 0xF9	; 249
 106:	4c f4       	brge	.+18     	; 0x11a <lrint+0x3c>
 108:	b1 11       	cpse	r27, r1
 10a:	b1 e0       	ldi	r27, 0x01	; 1
 10c:	b6 2b       	or	r27, r22
 10e:	67 2f       	mov	r22, r23
 110:	78 2f       	mov	r23, r24
 112:	88 27       	eor	r24, r24
 114:	98 5f       	subi	r25, 0xF8	; 248
 116:	b1 f7       	brne	.-20     	; 0x104 <lrint+0x26>
 118:	08 c0       	rjmp	.+16     	; 0x12a <lrint+0x4c>
 11a:	86 95       	lsr	r24
 11c:	77 95       	ror	r23
 11e:	67 95       	ror	r22
 120:	b7 95       	ror	r27
 122:	08 f4       	brcc	.+2      	; 0x126 <lrint+0x48>
 124:	b1 60       	ori	r27, 0x01	; 1
 126:	93 95       	inc	r25
 128:	c1 f7       	brne	.-16     	; 0x11a <lrint+0x3c>
 12a:	bb 0f       	add	r27, r27
 12c:	30 f4       	brcc	.+12     	; 0x13a <lrint+0x5c>
 12e:	11 f4       	brne	.+4      	; 0x134 <lrint+0x56>
 130:	60 ff       	sbrs	r22, 0
 132:	03 c0       	rjmp	.+6      	; 0x13a <lrint+0x5c>
 134:	6f 5f       	subi	r22, 0xFF	; 255
 136:	7f 4f       	sbci	r23, 0xFF	; 255
 138:	8f 4f       	sbci	r24, 0xFF	; 255
 13a:	3e f4       	brtc	.+14     	; 0x14a <lrint+0x6c>
 13c:	90 95       	com	r25
 13e:	80 95       	com	r24
 140:	70 95       	com	r23
 142:	61 95       	neg	r22
 144:	7f 4f       	sbci	r23, 0xFF	; 255
 146:	8f 4f       	sbci	r24, 0xFF	; 255
 148:	9f 4f       	sbci	r25, 0xFF	; 255
 14a:	08 95       	ret
 14c:	68 94       	set
 14e:	24 c0       	rjmp	.+72     	; 0x198 <__fp_szero>
 150:	22 c0       	rjmp	.+68     	; 0x196 <__fp_zero>

00000152 <__fp_split3>:
 152:	57 fd       	sbrc	r21, 7
 154:	90 58       	subi	r25, 0x80	; 128
 156:	44 0f       	add	r20, r20
 158:	55 1f       	adc	r21, r21
 15a:	59 f0       	breq	.+22     	; 0x172 <__fp_splitA+0x10>
 15c:	5f 3f       	cpi	r21, 0xFF	; 255
 15e:	71 f0       	breq	.+28     	; 0x17c <__fp_splitA+0x1a>
 160:	47 95       	ror	r20

00000162 <__fp_splitA>:
 162:	88 0f       	add	r24, r24
 164:	97 fb       	bst	r25, 7
 166:	99 1f       	adc	r25, r25
 168:	61 f0       	breq	.+24     	; 0x182 <__fp_splitA+0x20>
 16a:	9f 3f       	cpi	r25, 0xFF	; 255
 16c:	79 f0       	breq	.+30     	; 0x18c <__fp_splitA+0x2a>
 16e:	87 95       	ror	r24
 170:	08 95       	ret
 172:	12 16       	cp	r1, r18
 174:	13 06       	cpc	r1, r19
 176:	14 06       	cpc	r1, r20
 178:	55 1f       	adc	r21, r21
 17a:	f2 cf       	rjmp	.-28     	; 0x160 <__fp_split3+0xe>
 17c:	46 95       	lsr	r20
 17e:	f1 df       	rcall	.-30     	; 0x162 <__fp_splitA>
 180:	08 c0       	rjmp	.+16     	; 0x192 <__fp_splitA+0x30>
 182:	16 16       	cp	r1, r22
 184:	17 06       	cpc	r1, r23
 186:	18 06       	cpc	r1, r24
 188:	99 1f       	adc	r25, r25
 18a:	f1 cf       	rjmp	.-30     	; 0x16e <__fp_splitA+0xc>
 18c:	86 95       	lsr	r24
 18e:	71 05       	cpc	r23, r1
 190:	61 05       	cpc	r22, r1
 192:	08 94       	sec
 194:	08 95       	ret

00000196 <__fp_zero>:
 196:	e8 94       	clt

00000198 <__fp_szero>:
 198:	bb 27       	eor	r27, r27
 19a:	66 27       	eor	r22, r22
 19c:	77 27       	eor	r23, r23
 19e:	cb 01       	movw	r24, r22
 1a0:	97 f9       	bld	r25, 7
 1a2:	08 95       	ret

000001a4 <_exit>:
 1a4:	f8 94       	cli

000001a6 <__stop_program>:
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <__stop_program>

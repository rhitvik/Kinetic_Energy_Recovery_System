
tx02atmegaa8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000035c  000003f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000035c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000003f0  2**0
                  ALLOC
  3 .stab         00000c18  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001ab  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  000011b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000490  00000000  00000000  00001238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000186  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000362  00000000  00000000  0000184e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  00001bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000016f  00000000  00000000  00001c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000018a  00000000  00000000  00001dd7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 b3 00 	jmp	0x166	; 0x166 <__vector_20>
  54:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e5       	ldi	r30, 0x5C	; 92
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  9e:	0c 94 ac 01 	jmp	0x358	; 0x358 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z12TransmitUARTh>:
//	}		
}

void TransmitUART(uint8_t data)
{
	while (! (UCSR0A & (1 << UDRE0)) );
  a6:	e0 ec       	ldi	r30, 0xC0	; 192
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	95 ff       	sbrs	r25, 5
  ae:	fd cf       	rjmp	.-6      	; 0xaa <_Z12TransmitUARTh+0x4>
	UDR0 = data;
  b0:	80 93 c6 00 	sts	0x00C6, r24
}
  b4:	08 95       	ret

000000b6 <main>:
int a=0;
uint8_t b=0;

int main(void)
{
	DDRB  = 0xFF;
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;
  ba:	15 b8       	out	0x05, r1	; 5
	
	DDRC  = 0;
  bc:	17 b8       	out	0x07, r1	; 7
	PORTC = 0;
  be:	18 b8       	out	0x08, r1	; 8
	
	DDRD  = 0b11111100;
  c0:	8c ef       	ldi	r24, 0xFC	; 252
  c2:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
  c4:	1b b8       	out	0x0b, r1	; 11
	
	int baud = 9600;	
	UCSR0A &= ~(1 << U2X0);		
  c6:	e0 ec       	ldi	r30, 0xC0	; 192
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	8d 7f       	andi	r24, 0xFD	; 253
  ce:	80 83       	st	Z, r24
	uint16_t UBRRValue = lrint((F_CPU /(16L * baud)) - 1);		
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	80 ea       	ldi	r24, 0xA0	; 160
  d6:	90 e4       	ldi	r25, 0x40	; 64
  d8:	0e 94 49 01 	call	0x292	; 0x292 <lrint>
	UBRR0H = (unsigned char) (UBRRValue >> 8);
  dc:	70 93 c5 00 	sts	0x00C5, r23
	UBRR0L = (unsigned char) UBRRValue;
  e0:	60 93 c4 00 	sts	0x00C4, r22
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
  e4:	e1 ec       	ldi	r30, 0xC1	; 193
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	88 61       	ori	r24, 0x18	; 24
  ec:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXCIE0) | (1 << RXCIE0);
  ee:	80 81       	ld	r24, Z
  f0:	80 6c       	ori	r24, 0xC0	; 192
  f2:	80 83       	st	Z, r24
		
	UCSR0C |= (1 << USBS0); //Sets 2 stop bits
  f4:	e2 ec       	ldi	r30, 0xC2	; 194
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	88 60       	ori	r24, 0x08	; 8
  fc:	80 83       	st	Z, r24
	UCSR0C |= (1 << UPM01); //Sets parity to EVEN
  fe:	80 81       	ld	r24, Z
 100:	80 62       	ori	r24, 0x20	; 32
 102:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01); //Alternative code for 8-bit data length
 104:	80 81       	ld	r24, Z
 106:	86 60       	ori	r24, 0x06	; 6
 108:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADPS2) | (1<<ADIE);
 10a:	ca e7       	ldi	r28, 0x7A	; 122
 10c:	d0 e0       	ldi	r29, 0x00	; 0
 10e:	88 81       	ld	r24, Y
 110:	8c 60       	ori	r24, 0x0C	; 12
 112:	88 83       	st	Y, r24
	ADMUX  |= (1<<ADLAR) |(1<<REFS0);
 114:	ec e7       	ldi	r30, 0x7C	; 124
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	80 66       	ori	r24, 0x60	; 96
 11c:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);
 11e:	88 81       	ld	r24, Y
 120:	80 68       	ori	r24, 0x80	; 128
 122:	88 83       	st	Y, r24
	
	TCCR1A |= (1<<WGM11) |(1<<COM1A1) |(1<<COM1B1);
 124:	e0 e8       	ldi	r30, 0x80	; 128
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	82 6a       	ori	r24, 0xA2	; 162
 12c:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12) |(1<<WGM13) |(1<<CS10);
 12e:	e1 e8       	ldi	r30, 0x81	; 129
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	89 61       	ori	r24, 0x19	; 25
 136:	80 83       	st	Z, r24
	ICR1=19999; //top value
 138:	8f e1       	ldi	r24, 0x1F	; 31
 13a:	9e e4       	ldi	r25, 0x4E	; 78
 13c:	90 93 87 00 	sts	0x0087, r25
 140:	80 93 86 00 	sts	0x0086, r24
		
	sei();
 144:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	8f e3       	ldi	r24, 0x3F	; 63
 148:	9d e0       	ldi	r25, 0x0D	; 13
 14a:	a3 e0       	ldi	r26, 0x03	; 3
 14c:	81 50       	subi	r24, 0x01	; 1
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	a0 40       	sbci	r26, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0x96>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0xa0>
 156:	00 00       	nop
	
	_delay_ms(1000);
	
	TransmitUART(0xFF);
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z12TransmitUARTh>
		
	ADCSRA |= (1<<ADSC);
 15e:	88 81       	ld	r24, Y
 160:	80 64       	ori	r24, 0x40	; 64
 162:	88 83       	st	Y, r24
 164:	ff cf       	rjmp	.-2      	; 0x164 <main+0xae>

00000166 <__vector_20>:
	while (! (UCSR0A & (1 << UDRE0)) );
	UDR0 = data;
}

ISR (USART_TX_vect)
{
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
 170:	8f 93       	push	r24
 172:	9f 93       	push	r25
	PORTC ^= (1<<PINC0);
 174:	98 b1       	in	r25, 0x08	; 8
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	89 27       	eor	r24, r25
 17a:	88 b9       	out	0x08, r24	; 8
}
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <__vector_21>:

ISR (ADC_vect)
{
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	2f 93       	push	r18
 196:	3f 93       	push	r19
 198:	4f 93       	push	r20
 19a:	5f 93       	push	r21
 19c:	6f 93       	push	r22
 19e:	7f 93       	push	r23
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
 1a4:	af 93       	push	r26
 1a6:	bf 93       	push	r27
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	ef 93       	push	r30
 1ae:	ff 93       	push	r31
	uint8_t the_low = ADCL;
 1b0:	c0 91 78 00 	lds	r28, 0x0078
	uint8_t the_high = ADCH;
 1b4:	d0 91 79 00 	lds	r29, 0x0079
	uint16_t ten_bit_val = the_high<<2 | the_low>>6;
 1b8:	8c 2f       	mov	r24, r28
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	08 2e       	mov	r0, r24
 1be:	89 2f       	mov	r24, r25
 1c0:	00 0c       	add	r0, r0
 1c2:	88 1f       	adc	r24, r24
 1c4:	99 0b       	sbc	r25, r25
 1c6:	00 0c       	add	r0, r0
 1c8:	88 1f       	adc	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	2d 2f       	mov	r18, r29
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	22 0f       	add	r18, r18
 1d2:	33 1f       	adc	r19, r19
 1d4:	22 0f       	add	r18, r18
 1d6:	33 1f       	adc	r19, r19
 1d8:	82 2b       	or	r24, r18
 1da:	93 2b       	or	r25, r19
	a=ten_bit_val;
 1dc:	90 93 02 01 	sts	0x0102, r25
 1e0:	80 93 01 01 	sts	0x0101, r24
	if (a>1000)
 1e4:	23 e0       	ldi	r18, 0x03	; 3
 1e6:	89 3e       	cpi	r24, 0xE9	; 233
 1e8:	92 07       	cpc	r25, r18
 1ea:	34 f0       	brlt	.+12     	; 0x1f8 <__vector_21+0x6e>
	{
		a=1000;
 1ec:	88 ee       	ldi	r24, 0xE8	; 232
 1ee:	93 e0       	ldi	r25, 0x03	; 3
 1f0:	90 93 02 01 	sts	0x0102, r25
 1f4:	80 93 01 01 	sts	0x0101, r24
	}
	

	switch (ADMUX)
 1f8:	80 91 7c 00 	lds	r24, 0x007C
 1fc:	80 36       	cpi	r24, 0x60	; 96
 1fe:	19 f0       	breq	.+6      	; 0x206 <__vector_21+0x7c>
 200:	81 36       	cpi	r24, 0x61	; 97
 202:	79 f5       	brne	.+94     	; 0x262 <__vector_21+0xd8>
 204:	17 c0       	rjmp	.+46     	; 0x234 <__vector_21+0xaa>
	{
		case 0x60:
		b=0;
 206:	10 92 00 01 	sts	0x0100, r1
		OCR1A = a;
 20a:	80 91 01 01 	lds	r24, 0x0101
 20e:	90 91 02 01 	lds	r25, 0x0102
 212:	90 93 89 00 	sts	0x0089, r25
 216:	80 93 88 00 	sts	0x0088, r24
		TransmitUART(0x60);
 21a:	80 e6       	ldi	r24, 0x60	; 96
 21c:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z12TransmitUARTh>
		TransmitUART(the_low);
 220:	8c 2f       	mov	r24, r28
 222:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z12TransmitUARTh>
		TransmitUART(the_high);
 226:	8d 2f       	mov	r24, r29
 228:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z12TransmitUARTh>
		ADMUX = 0x61;
 22c:	81 e6       	ldi	r24, 0x61	; 97
 22e:	80 93 7c 00 	sts	0x007C, r24
		break;
 232:	17 c0       	rjmp	.+46     	; 0x262 <__vector_21+0xd8>
		case 0x61:
		b=1;
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	80 93 00 01 	sts	0x0100, r24
		OCR1B = a;
 23a:	80 91 01 01 	lds	r24, 0x0101
 23e:	90 91 02 01 	lds	r25, 0x0102
 242:	90 93 8b 00 	sts	0x008B, r25
 246:	80 93 8a 00 	sts	0x008A, r24
		TransmitUART(0x61);
 24a:	81 e6       	ldi	r24, 0x61	; 97
 24c:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z12TransmitUARTh>
		TransmitUART(the_low);
 250:	8c 2f       	mov	r24, r28
 252:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z12TransmitUARTh>
		TransmitUART(the_high);
 256:	8d 2f       	mov	r24, r29
 258:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z12TransmitUARTh>
		ADMUX = 0x60;
 25c:	80 e6       	ldi	r24, 0x60	; 96
 25e:	80 93 7c 00 	sts	0x007C, r24
		break;
	}
	
	ADCSRA |= (1<<ADSC);
 262:	ea e7       	ldi	r30, 0x7A	; 122
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	80 64       	ori	r24, 0x40	; 64
 26a:	80 83       	st	Z, r24
 26c:	ff 91       	pop	r31
 26e:	ef 91       	pop	r30
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	bf 91       	pop	r27
 276:	af 91       	pop	r26
 278:	9f 91       	pop	r25
 27a:	8f 91       	pop	r24
 27c:	7f 91       	pop	r23
 27e:	6f 91       	pop	r22
 280:	5f 91       	pop	r21
 282:	4f 91       	pop	r20
 284:	3f 91       	pop	r19
 286:	2f 91       	pop	r18
 288:	0f 90       	pop	r0
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	0f 90       	pop	r0
 28e:	1f 90       	pop	r1
 290:	18 95       	reti

00000292 <lrint>:
 292:	41 d0       	rcall	.+130    	; 0x316 <__fp_splitA>
 294:	a8 f1       	brcs	.+106    	; 0x300 <lrint+0x6e>
 296:	9e 57       	subi	r25, 0x7E	; 126
 298:	a8 f1       	brcs	.+106    	; 0x304 <lrint+0x72>
 29a:	98 51       	subi	r25, 0x18	; 24
 29c:	60 f0       	brcs	.+24     	; 0x2b6 <lrint+0x24>
 29e:	39 f1       	breq	.+78     	; 0x2ee <lrint+0x5c>
 2a0:	98 30       	cpi	r25, 0x08	; 8
 2a2:	70 f5       	brcc	.+92     	; 0x300 <lrint+0x6e>
 2a4:	09 2e       	mov	r0, r25
 2a6:	99 27       	eor	r25, r25
 2a8:	66 0f       	add	r22, r22
 2aa:	77 1f       	adc	r23, r23
 2ac:	88 1f       	adc	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	0a 94       	dec	r0
 2b2:	d1 f7       	brne	.-12     	; 0x2a8 <lrint+0x16>
 2b4:	1c c0       	rjmp	.+56     	; 0x2ee <lrint+0x5c>
 2b6:	bb 27       	eor	r27, r27
 2b8:	99 3f       	cpi	r25, 0xF9	; 249
 2ba:	4c f4       	brge	.+18     	; 0x2ce <lrint+0x3c>
 2bc:	b1 11       	cpse	r27, r1
 2be:	b1 e0       	ldi	r27, 0x01	; 1
 2c0:	b6 2b       	or	r27, r22
 2c2:	67 2f       	mov	r22, r23
 2c4:	78 2f       	mov	r23, r24
 2c6:	88 27       	eor	r24, r24
 2c8:	98 5f       	subi	r25, 0xF8	; 248
 2ca:	b1 f7       	brne	.-20     	; 0x2b8 <lrint+0x26>
 2cc:	08 c0       	rjmp	.+16     	; 0x2de <lrint+0x4c>
 2ce:	86 95       	lsr	r24
 2d0:	77 95       	ror	r23
 2d2:	67 95       	ror	r22
 2d4:	b7 95       	ror	r27
 2d6:	08 f4       	brcc	.+2      	; 0x2da <lrint+0x48>
 2d8:	b1 60       	ori	r27, 0x01	; 1
 2da:	93 95       	inc	r25
 2dc:	c1 f7       	brne	.-16     	; 0x2ce <lrint+0x3c>
 2de:	bb 0f       	add	r27, r27
 2e0:	30 f4       	brcc	.+12     	; 0x2ee <lrint+0x5c>
 2e2:	11 f4       	brne	.+4      	; 0x2e8 <lrint+0x56>
 2e4:	60 ff       	sbrs	r22, 0
 2e6:	03 c0       	rjmp	.+6      	; 0x2ee <lrint+0x5c>
 2e8:	6f 5f       	subi	r22, 0xFF	; 255
 2ea:	7f 4f       	sbci	r23, 0xFF	; 255
 2ec:	8f 4f       	sbci	r24, 0xFF	; 255
 2ee:	3e f4       	brtc	.+14     	; 0x2fe <lrint+0x6c>
 2f0:	90 95       	com	r25
 2f2:	80 95       	com	r24
 2f4:	70 95       	com	r23
 2f6:	61 95       	neg	r22
 2f8:	7f 4f       	sbci	r23, 0xFF	; 255
 2fa:	8f 4f       	sbci	r24, 0xFF	; 255
 2fc:	9f 4f       	sbci	r25, 0xFF	; 255
 2fe:	08 95       	ret
 300:	68 94       	set
 302:	24 c0       	rjmp	.+72     	; 0x34c <__fp_szero>
 304:	22 c0       	rjmp	.+68     	; 0x34a <__fp_zero>

00000306 <__fp_split3>:
 306:	57 fd       	sbrc	r21, 7
 308:	90 58       	subi	r25, 0x80	; 128
 30a:	44 0f       	add	r20, r20
 30c:	55 1f       	adc	r21, r21
 30e:	59 f0       	breq	.+22     	; 0x326 <__fp_splitA+0x10>
 310:	5f 3f       	cpi	r21, 0xFF	; 255
 312:	71 f0       	breq	.+28     	; 0x330 <__fp_splitA+0x1a>
 314:	47 95       	ror	r20

00000316 <__fp_splitA>:
 316:	88 0f       	add	r24, r24
 318:	97 fb       	bst	r25, 7
 31a:	99 1f       	adc	r25, r25
 31c:	61 f0       	breq	.+24     	; 0x336 <__fp_splitA+0x20>
 31e:	9f 3f       	cpi	r25, 0xFF	; 255
 320:	79 f0       	breq	.+30     	; 0x340 <__fp_splitA+0x2a>
 322:	87 95       	ror	r24
 324:	08 95       	ret
 326:	12 16       	cp	r1, r18
 328:	13 06       	cpc	r1, r19
 32a:	14 06       	cpc	r1, r20
 32c:	55 1f       	adc	r21, r21
 32e:	f2 cf       	rjmp	.-28     	; 0x314 <__fp_split3+0xe>
 330:	46 95       	lsr	r20
 332:	f1 df       	rcall	.-30     	; 0x316 <__fp_splitA>
 334:	08 c0       	rjmp	.+16     	; 0x346 <__fp_splitA+0x30>
 336:	16 16       	cp	r1, r22
 338:	17 06       	cpc	r1, r23
 33a:	18 06       	cpc	r1, r24
 33c:	99 1f       	adc	r25, r25
 33e:	f1 cf       	rjmp	.-30     	; 0x322 <__fp_splitA+0xc>
 340:	86 95       	lsr	r24
 342:	71 05       	cpc	r23, r1
 344:	61 05       	cpc	r22, r1
 346:	08 94       	sec
 348:	08 95       	ret

0000034a <__fp_zero>:
 34a:	e8 94       	clt

0000034c <__fp_szero>:
 34c:	bb 27       	eor	r27, r27
 34e:	66 27       	eor	r22, r22
 350:	77 27       	eor	r23, r23
 352:	cb 01       	movw	r24, r22
 354:	97 f9       	bld	r25, 7
 356:	08 95       	ret

00000358 <_exit>:
 358:	f8 94       	cli

0000035a <__stop_program>:
 35a:	ff cf       	rjmp	.-2      	; 0x35a <__stop_program>
